int
pyexec_krate(ENVIRON *csound, PYEXEC *p)
{
  char source[1024];
  PyObject *result;

  strcpy(source, (char *)p->string);

  result = exec_file_in_given_context(source, 0);
  if (result == NULL)
    {
      csound->Message(csound, "pyexec_krate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  Py_DECREF(result);
  return OK;
}

int
pyexeci_irate(ENVIRON *csound, PYEXEC *p)
{
  char source[1024];
  PyObject *result;

  strcpy(source, (char *)p->string);

  result = exec_file_in_given_context(source, 0);
  if (result == NULL)
    {
      csound->Message(csound, "pyexeci_irate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  Py_DECREF(result);
  return OK;
}

int
pylexec_irate(ENVIRON *csound, PYEXEC *p)
{

  create_private_namespace_if_needed(&p->h);
  return OK;
}

int
pylexec_krate(ENVIRON *csound, PYEXEC *p)
{
  char source[1024];
  PyObject *result;

  strcpy(source, (char *)p->string);

  result = exec_file_in_given_context(source, GETPYLOCAL(p->h.insdshead));
  if (result == NULL)
    {
      csound->Message(csound, "pylexec_krate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  Py_DECREF(result);
  return OK;
}

int
pylexeci_irate(ENVIRON *csound, PYEXEC *p)
{
  char source[1024];
  PyObject *result;

  create_private_namespace_if_needed(&p->h);

  strcpy(source, (char *)p->string);

  result = exec_file_in_given_context(source, GETPYLOCAL(p->h.insdshead));
  if (result == NULL)
    {
      csound->Message(csound, "pylexeci_irate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  Py_DECREF(result);
  return OK;
}

int
pyexect_krate(ENVIRON *csound, PYEXECT *p)
{
  char source[1024];
  PyObject *result;

  if (!*p->trigger) return OK;

  strcpy(source, (char *)p->string);

  result = exec_file_in_given_context(source, 0);
  if (result == NULL)
    {
      csound->Message(csound, "pyexec_krate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  Py_DECREF(result);
  return OK;
}

int
pylexect_irate(ENVIRON *csound, PYEXECT *p)
{

  create_private_namespace_if_needed(&p->h);
  return OK;
}

int
pylexect_krate(ENVIRON *csound, PYEXECT *p)
{
  char source[1024];
  PyObject *result;

  if (!*p->trigger) return OK;

  strcpy(source, (char *)p->string);

  result = exec_file_in_given_context(source, GETPYLOCAL(p->h.insdshead));
  if (result == NULL)
    {
      csound->Message(csound, "pylexec_krate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  Py_DECREF(result);
  return OK;
}

int
pyrun_krate(ENVIRON *csound, PYRUN *p)
{
  char source[40960];
  PyObject *result;

  strcpy(source, (char *)p->string);

  result = run_statement_in_given_context(source, 0);
  if (result == NULL)
    {
      csound->Message(csound, "pyrun_krate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  Py_DECREF(result);
  return OK;
}

int
pyruni_irate(ENVIRON *csound, PYRUN *p)
{
  char source[40960];
  PyObject *result;

  strcpy(source, (char *)p->string);

  result = run_statement_in_given_context(source, 0);
  if (result == NULL)
    {
      csound->Message(csound, "pyruni_irate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  Py_DECREF(result);
  return OK;
}

int
pylrun_irate(ENVIRON *csound, PYRUN *p)
{

  create_private_namespace_if_needed(&p->h);
  return OK;
}

int
pylrun_krate(ENVIRON *csound, PYRUN *p)
{
  char source[40960];
  PyObject *result;

  strcpy(source, (char *)p->string);

  result = run_statement_in_given_context(source, GETPYLOCAL(p->h.insdshead));
  if (result == NULL)
    {
      csound->Message(csound, "pylrun_krate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  Py_DECREF(result);
  return OK;
}

int
pylruni_irate(ENVIRON *csound, PYRUN *p)
{
  char source[40960];
  PyObject *result;

  create_private_namespace_if_needed(&p->h);

  strcpy(source, (char *)p->string);

  result = run_statement_in_given_context(source, GETPYLOCAL(p->h.insdshead));
  if (result == NULL)
    {
      csound->Message(csound, "pylruni_irate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  Py_DECREF(result);
  return OK;
}

int
pyrunt_krate(ENVIRON *csound, PYRUNT *p)
{
  char source[40960];
  PyObject *result;

  if (!*p->trigger) return OK;

  strcpy(source, (char *)p->string);

  result = run_statement_in_given_context(source, 0);
  if (result == NULL)
    {
      csound->Message(csound, "pyrun_krate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  Py_DECREF(result);
  return OK;
}

int
pylrunt_irate(ENVIRON *csound, PYRUNT *p)
{

  create_private_namespace_if_needed(&p->h);
  return OK;
}

int
pylrunt_krate(ENVIRON *csound, PYRUNT *p)
{
  char source[40960];
  PyObject *result;

  if (!*p->trigger) return OK;

  strcpy(source, (char *)p->string);

  result = run_statement_in_given_context(source, GETPYLOCAL(p->h.insdshead));
  if (result == NULL)
    {
      csound->Message(csound, "pylrun_krate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  Py_DECREF(result);
  return OK;
}

int
pyeval_krate(ENVIRON *csound, PYEVAL *p)
{
  char source[1024];
  PyObject *result;

  strcpy(source, (char *)p->string);

  result = eval_string_in_given_context(source, 0);
  if (result == NULL)
    {
      csound->Message(csound, "pyeval_krate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  else if (!PyFloat_Check(result))
    {
      csound->Message(csound, "pyeval_krate: expression must evaluate in a float\n");
    }
  else
    {
       *p->result = PyFloat_AsDouble(result);
    }
  Py_DECREF(result);
  return OK;
}

int
pyevali_irate(ENVIRON *csound, PYEVAL *p)
{
  char source[1024];
  PyObject *result;

  strcpy(source, (char *)p->string);

  result = eval_string_in_given_context(source, 0);
  if (result == NULL)
    {
      csound->Message(csound, "pyevali_irate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  else if (!PyFloat_Check(result))
    {
      csound->Message(csound, "pyevali_irate: expression must evaluate in a float\n");
    }
  else
    {
       *p->result = PyFloat_AsDouble(result);
    }
  Py_DECREF(result);
  return OK;
}

int
pyleval_irate(ENVIRON *csound, PYEVAL *p)
{

  create_private_namespace_if_needed(&p->h);
  return OK;
}

int
pyleval_krate(ENVIRON *csound, PYEVAL *p)
{
  char source[1024];
  PyObject *result;

  strcpy(source, (char *)p->string);

  result = eval_string_in_given_context(source, GETPYLOCAL(p->h.insdshead));
  if (result == NULL)
    {
      csound->Message(csound, "pyleval_krate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  else if (!PyFloat_Check(result))
    {
      csound->Message(csound, "pyleval_krate: expression must evaluate in a float\n");
    }
  else
    {
       *p->result = PyFloat_AsDouble(result);
    }
  Py_DECREF(result);
  return OK;
}

int
pylevali_irate(ENVIRON *csound, PYEVAL *p)
{
  char source[1024];
  PyObject *result;

  create_private_namespace_if_needed(&p->h);

  strcpy(source, (char *)p->string);

  result = eval_string_in_given_context(source, GETPYLOCAL(p->h.insdshead));
  if (result == NULL)
    {
      csound->Message(csound, "pylevali_irate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  else if (!PyFloat_Check(result))
    {
      csound->Message(csound, "pylevali_irate: expression must evaluate in a float\n");
    }
  else
    {
       *p->result = PyFloat_AsDouble(result);
    }
  Py_DECREF(result);
  return OK;
}

int
pyevalt_krate(ENVIRON *csound, PYEVALT *p)
{
  char source[1024];
  PyObject *result;

  if (!*p->trigger)
    {
      *p->result = p->oresult;
    }

  strcpy(source, (char *)p->string);

  result = eval_string_in_given_context(source, 0);
  if (result == NULL)
    {
      csound->Message(csound, "pyeval_krate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  else if (!PyFloat_Check(result))
    {
      csound->Message(csound, "pyeval_krate: expression must evaluate in a float\n");
    }
  else
    {
       *p->result = PyFloat_AsDouble(result);
       p->oresult = *p->result;
    }
  Py_DECREF(result);
  return OK;
}

int
pylevalt_irate(ENVIRON *csound, PYEVALT *p)
{

  create_private_namespace_if_needed(&p->h);
  return OK;
}

int
pylevalt_krate(ENVIRON *csound, PYEVALT *p)
{
  char source[1024];
  PyObject *result;

  if (!*p->trigger)
    {
      *p->result = p->oresult;
    }

  strcpy(source, (char *)p->string);

  result = eval_string_in_given_context(source, GETPYLOCAL(p->h.insdshead));
  if (result == NULL)
    {
      csound->Message(csound, "pyleval_krate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  else if (!PyFloat_Check(result))
    {
      csound->Message(csound, "pyleval_krate: expression must evaluate in a float\n");
    }
  else
    {
       *p->result = PyFloat_AsDouble(result);
       p->oresult = *p->result;
    }
  Py_DECREF(result);
  return OK;
}

int
pyassign_krate(ENVIRON *csound, PYASSIGN *p)
{
  char source[1024];
  PyObject *result;

  sprintf(source, "%s = %f", (char *)p->string, *p->value);

  result = run_statement_in_given_context(source, 0);
  if (result == NULL)
    {
      csound->Message(csound, "pyassign_krate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  Py_DECREF(result);
  return OK;
}

int
pyassigni_irate(ENVIRON *csound, PYASSIGN *p)
{
  char source[1024];
  PyObject *result;

  sprintf(source, "%s = %f", (char *)p->string, *p->value);

  result = run_statement_in_given_context(source, 0);
  if (result == NULL)
    {
      csound->Message(csound, "pyassigni_irate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  Py_DECREF(result);
  return OK;
}

int
pylassign_irate(ENVIRON *csound, PYASSIGN *p)
{

  create_private_namespace_if_needed(&p->h);
  return OK;
}

int
pylassign_krate(ENVIRON *csound, PYASSIGN *p)
{
  char source[1024];
  PyObject *result;

  sprintf(source, "%s = %f", (char *)p->string, *p->value);

  result = run_statement_in_given_context(source, GETPYLOCAL(p->h.insdshead));
  if (result == NULL)
    {
      csound->Message(csound, "pylassign_krate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  Py_DECREF(result);
  return OK;
}

int
pylassigni_irate(ENVIRON *csound, PYASSIGN *p)
{
  char source[1024];
  PyObject *result;

  create_private_namespace_if_needed(&p->h);

  sprintf(source, "%s = %f", (char *)p->string, *p->value);

  result = run_statement_in_given_context(source, GETPYLOCAL(p->h.insdshead));
  if (result == NULL)
    {
      csound->Message(csound, "pylassigni_irate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  Py_DECREF(result);
  return OK;
}

int
pyassignt_krate(ENVIRON *csound, PYASSIGNT *p)
{
  char source[1024];
  PyObject *result;

  if (!*p->trigger) return OK;

  sprintf(source, "%s = %f", (char *)p->string, *p->value);

  result = run_statement_in_given_context(source, 0);
  if (result == NULL)
    {
      csound->Message(csound, "pyassign_krate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  Py_DECREF(result);
  return OK;
}

int
pylassignt_irate(ENVIRON *csound, PYASSIGNT *p)
{

  create_private_namespace_if_needed(&p->h);
  return OK;
}

int
pylassignt_krate(ENVIRON *csound, PYASSIGNT *p)
{
  char source[1024];
  PyObject *result;

  if (!*p->trigger) return OK;

  sprintf(source, "%s = %f", (char *)p->string, *p->value);

  result = run_statement_in_given_context(source, GETPYLOCAL(p->h.insdshead));
  if (result == NULL)
    {
      csound->Message(csound, "pylassign_krate: python exception\n");
      PyErr_Print();
      return NOTOK;
    }
  Py_DECREF(result);
  return OK;
}

