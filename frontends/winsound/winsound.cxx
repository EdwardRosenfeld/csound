// generated by Fast Light User Interface Designer (fluid) version 1.0106

#include "winsound.h"
#include <FL/Fl_File_Chooser.H>
int do_exit;
int do_perf, do_util;
int do_load;
Fl_Double_Window *ew;
Fl_Double_Window *xw;
Fl_Double_Window *uw;
#include <FL/Fl_Pixmap.H>
#include "winsound.xpm"
void cs_util_sndinfo(void);
void cs_util_opc(int full);

Fl_File_Input *orchname=(Fl_File_Input *)0;

static void cb_orchname(Fl_File_Input*, void*) {
  do_load = 1;
}

Fl_File_Input *scorename=(Fl_File_Input *)0;

Fl_File_Input *output=(Fl_File_Input *)0;

Fl_Check_Button *DAC=(Fl_Check_Button *)0;

static void cb_DAC(Fl_Check_Button*, void*) {
  if (DAC->value()) output->value("dac");
}

Fl_Round_Button *wav=(Fl_Round_Button *)0;

static void cb_wav(Fl_Round_Button*, void*) {
  wav->value(1);
aiff->value(0);
ircam->value(0);
raw->value(0);
}

Fl_Round_Button *aiff=(Fl_Round_Button *)0;

static void cb_aiff(Fl_Round_Button*, void*) {
  wav->value(0);
aiff->value(1);
ircam->value(0);
raw->value(0);
}

Fl_Round_Button *ircam=(Fl_Round_Button *)0;

static void cb_ircam(Fl_Round_Button*, void*) {
  wav->value(0);
aiff->value(0);
ircam->value(1);
raw->value(0);
}

Fl_Round_Button *raw=(Fl_Round_Button *)0;

static void cb_raw(Fl_Round_Button*, void*) {
  wav->value(0);
aiff->value(0);
ircam->value(0);
raw->value(1);
}

Fl_Round_Button *size_8=(Fl_Round_Button *)0;

static void cb_size_8(Fl_Round_Button*, void*) {
  size_8->value(1);
size_16->value(0);
size_24->value(0);
size_32->value(0);
size_f->value(0);
}

Fl_Round_Button *size_16=(Fl_Round_Button *)0;

static void cb_size_16(Fl_Round_Button*, void*) {
  size_8->value(0);
size_16->value(1);
size_24->value(0);
size_32->value(0);
size_f->value(0);
}

Fl_Round_Button *size_24=(Fl_Round_Button *)0;

static void cb_size_24(Fl_Round_Button*, void*) {
  size_8->value(0);
size_16->value(0);
size_24->value(1);
size_32->value(0);
size_f->value(0);
}

Fl_Round_Button *size_32=(Fl_Round_Button *)0;

static void cb_size_32(Fl_Round_Button*, void*) {
  size_8->value(0);
size_16->value(0);
size_24->value(0);
size_32->value(1);
size_f->value(0);
}

Fl_Round_Button *size_f=(Fl_Round_Button *)0;

static void cb_size_f(Fl_Round_Button*, void*) {
  size_8->value(0);
size_16->value(0);
size_24->value(0);
size_32->value(0);
size_f->value(1);
}

Fl_Check_Button *mK=(Fl_Check_Button *)0;

static void cb_Render(Fl_Button*, void*) {
  do_perf = 1;
}

static void cb_Env(Fl_Button*, void*) {
  ew->show();
}

static void cb_Cancel(Fl_Button*, void*) {
  do_exit = 1;
}

static void cb_Utilities(Fl_Button*, void*) {
  uw->show();
}

static void cb_Extra(Fl_Button*, void*) {
  xw->show();
}

static void cb_New(Fl_Button*, void*) {
  do_load = 1;
}

static void cb_(Fl_Button*, void*) {
  orchname->value(fl_file_chooser("Orc/Csd", "*.{orc,csd}", NULL));
do_load = 1;
}

static void cb_1(Fl_Button*, void*) {
  scorename->value(fl_file_chooser("Score", "*.sco", NULL));
}

static void cb_2(Fl_Button*, void*) {
  output->value(fl_file_chooser("Output", "*.{wav,aif,raw,irc}", NULL));
}

Fl_Button *icon=(Fl_Button *)0;

Fl_Double_Window* make_mainwindow() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(465, 535, "WinSound");
    w = o;
    { Fl_File_Input* o = orchname = new Fl_File_Input(130, 15, 310, 30, "Orchestra           ");
      o->tooltip("File for csd or orchestra file");
      o->labeltype(FL_EMBOSSED_LABEL);
      o->callback((Fl_Callback*)cb_orchname);
    }
    { Fl_File_Input* o = scorename = new Fl_File_Input(130, 65, 310, 30, "Score           ");
      o->tooltip("File for csd or orchestra file");
      o->labeltype(FL_EMBOSSED_LABEL);
    }
    { Fl_File_Input* o = output = new Fl_File_Input(130, 120, 310, 30, "Output File           ");
      o->tooltip("File for csd or orchestra file");
      o->labeltype(FL_EMBOSSED_LABEL);
    }
    { Fl_Check_Button* o = DAC = new Fl_Check_Button(385, 150, 55, 30, "DAC");
      o->down_box(FL_DOWN_BOX);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->callback((Fl_Callback*)cb_DAC);
    }
    { Fl_Group* o = new Fl_Group(40, 180, 110, 155, "Format");
      o->box(FL_BORDER_BOX);
      o->align(FL_ALIGN_TOP_LEFT);
      { Fl_Round_Button* o = wav = new Fl_Round_Button(65, 195, 25, 25, "WAV");
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_wav);
        wav->value(1);
      }
      { Fl_Round_Button* o = aiff = new Fl_Round_Button(65, 230, 25, 25, "AIFF");
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_aiff);
      }
      { Fl_Round_Button* o = ircam = new Fl_Round_Button(65, 265, 25, 25, "IRCAM");
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_ircam);
      }
      { Fl_Round_Button* o = raw = new Fl_Round_Button(65, 300, 25, 25, "Raw");
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_raw);
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(175, 180, 105, 185, "Size");
      o->box(FL_BORDER_BOX);
      o->align(FL_ALIGN_TOP_LEFT);
      { Fl_Round_Button* o = size_8 = new Fl_Round_Button(205, 200, 25, 25, "8bit");
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_size_8);
      }
      { Fl_Round_Button* o = size_16 = new Fl_Round_Button(205, 235, 25, 25, "16bit");
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_size_16);
        size_16->value(1);
      }
      { Fl_Round_Button* o = size_24 = new Fl_Round_Button(205, 270, 25, 25, "24bit");
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_size_24);
      }
      { Fl_Round_Button* o = size_32 = new Fl_Round_Button(205, 305, 25, 25, "32bit");
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_size_32);
      }
      { Fl_Round_Button* o = size_f = new Fl_Round_Button(205, 335, 25, 25, "floats");
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_size_f);
      }
      o->end();
    }
    { Fl_Check_Button* o = mK = new Fl_Check_Button(40, 350, 110, 25, "Peak Chunks");
      o->down_box(FL_DOWN_BOX);
    }
    { Fl_Button* o = new Fl_Button(45, 415, 80, 35, "Render");
      o->box(FL_ENGRAVED_BOX);
      o->down_box(FL_EMBOSSED_BOX);
      o->color((Fl_Color)3);
      o->callback((Fl_Callback*)cb_Render);
    }
    { Fl_Button* o = new Fl_Button(140, 415, 80, 35, "Env");
      o->box(FL_ENGRAVED_BOX);
      o->down_box(FL_EMBOSSED_BOX);
      o->color((Fl_Color)133);
      o->callback((Fl_Callback*)cb_Env);
    }
    { Fl_Button* o = new Fl_Button(235, 415, 80, 35, "Cancel");
      o->box(FL_ENGRAVED_BOX);
      o->down_box(FL_EMBOSSED_BOX);
      o->color((Fl_Color)1);
      o->callback((Fl_Callback*)cb_Cancel);
    }
    { Fl_Button* o = new Fl_Button(335, 415, 80, 35, "Utilities");
      o->box(FL_ENGRAVED_BOX);
      o->down_box(FL_EMBOSSED_BOX);
      o->color((Fl_Color)143);
      o->callback((Fl_Callback*)cb_Utilities);
    }
    { Fl_Button* o = new Fl_Button(335, 355, 80, 35, "Extra");
      o->box(FL_ENGRAVED_BOX);
      o->down_box(FL_EMBOSSED_BOX);
      o->color((Fl_Color)231);
      o->callback((Fl_Callback*)cb_Extra);
    }
    { Fl_Button* o = new Fl_Button(335, 295, 80, 35, "Help");
      o->box(FL_ENGRAVED_BOX);
      o->down_box(FL_EMBOSSED_BOX);
      o->color((Fl_Color)251);
    }
    { Fl_Button* o = new Fl_Button(335, 235, 80, 35, "New");
      o->box(FL_ENGRAVED_BOX);
      o->down_box(FL_EMBOSSED_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_New);
    }
    { Fl_Output* o = new Fl_Output(140, 475, 275, 35, "output:");
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->labelfont(9);
      o->labelsize(18);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      o->value("Csound5 Launcher");
    }
    { Fl_Button* o = new Fl_Button(100, 20, 25, 25, "?");
      o->callback((Fl_Callback*)cb_);
    }
    { Fl_Button* o = new Fl_Button(100, 70, 25, 25, "?");
      o->callback((Fl_Callback*)cb_1);
    }
    { Fl_Button* o = new Fl_Button(100, 125, 25, 25, "?");
      o->callback((Fl_Callback*)cb_2);
    }
    { Fl_Button* o = icon = new Fl_Button(65, 460, 65, 65);
      o->box(FL_NO_BOX);
      o->deactivate();
      Fl_Pixmap *pixmap = new Fl_Pixmap(winsound_xpm);
      icon->image(pixmap);
    }
    o->end();
  }
  return w;
}

Fl_Round_Button *util_het=(Fl_Round_Button *)0;

static void cb_util_het(Fl_Round_Button*, void*) {
  util_lpc->value(0);
util_pvc->value(0);
util_cvl->value(0);
util_info->value(0);
util_pinfo->value(0);
util_dnoise->value(0);
util_opc->value(0);
util_opv->value(0);
}

Fl_Round_Button *util_lpc=(Fl_Round_Button *)0;

static void cb_util_lpc(Fl_Round_Button*, void*) {
  util_het->value(0);
util_pvc->value(0);
util_cvl->value(0);
util_info->value(0);
util_pinfo->value(0);
util_dnoise->value(0);
util_opc->value(0);
util_opv->value(0);
}

Fl_Round_Button *util_pvc=(Fl_Round_Button *)0;

static void cb_util_pvc(Fl_Round_Button*, void*) {
  util_het->value(0);
util_lpc->value(0);
util_cvl->value(0);
util_info->value(0);
util_pinfo->value(0);
util_dnoise->value(0);
util_opc->value(0);
util_opv->value(0);
}

Fl_Round_Button *util_cvl=(Fl_Round_Button *)0;

static void cb_util_cvl(Fl_Round_Button*, void*) {
  util_het->value(0);
util_lpc->value(0);
util_pvc->value(0);
util_info->value(0);
util_pinfo->value(0);
util_dnoise->value(0);
util_opc->value(0);
util_opv->value(0);
}

Fl_Round_Button *util_info=(Fl_Round_Button *)0;

static void cb_util_info(Fl_Round_Button*, void*) {
  util_het->value(0);
util_lpc->value(0);
util_pvc->value(0);
util_cvl->value(0);
util_pinfo->value(0);
util_dnoise->value(0);
util_opc->value(0);
util_opv->value(0);
}

Fl_Round_Button *util_pinfo=(Fl_Round_Button *)0;

static void cb_util_pinfo(Fl_Round_Button*, void*) {
  util_het->value(0);
util_lpc->value(0);
util_pvc->value(0);
util_cvl->value(0);
util_info->value(0);
util_dnoise->value(0);
util_opc->value(0);
util_opv->value(0);
}

Fl_Round_Button *util_dnoise=(Fl_Round_Button *)0;

static void cb_util_dnoise(Fl_Round_Button*, void*) {
  util_het->value(0);
util_lpc->value(0);
util_pvc->value(0);
util_cvl->value(0);
util_info->value(0);
util_pinfo->value(0);
util_opc->value(0);
util_opv->value(0);
}

Fl_Round_Button *util_opc=(Fl_Round_Button *)0;

static void cb_util_opc(Fl_Round_Button*, void*) {
  util_het->value(0);
util_lpc->value(0);
util_pvc->value(0);
util_cvl->value(0);
util_info->value(0);
util_pinfo->value(0);
util_dnoise->value(0);
util_opv->value(0);
}

Fl_Round_Button *util_opv=(Fl_Round_Button *)0;

static void cb_util_opv(Fl_Round_Button*, void*) {
  util_het->value(0);
util_lpc->value(0);
util_pvc->value(0);
util_cvl->value(0);
util_info->value(0);
util_pinfo->value(0);
util_dnoise->value(0);
util_opc->value(0);
}

static void cb_OK(Fl_Button*, void*) {
  // Do the thing
uw->hide();
do_util = 0;
if (util_info->value()) cs_util_sndinfo();
else if (util_opc->value()) cs_util_opc(0);
else if (util_opv->value()) cs_util_opc(1);
}

static void cb_Cancel1(Fl_Button*, void*) {
  uw->hide();
}

Fl_Double_Window* make_utils() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(215, 300, "Utilities");
    w = o;
    { Fl_Round_Button* o = util_het = new Fl_Round_Button(25, 5, 150, 25, "Hetrodyne Analysis");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_util_het);
      o->deactivate();
    }
    { Fl_Round_Button* o = util_lpc = new Fl_Round_Button(25, 32, 150, 25, "LPC Analysis");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_util_lpc);
      o->deactivate();
    }
    { Fl_Round_Button* o = util_pvc = new Fl_Round_Button(25, 60, 185, 25, "Phase Vocoding Analysis");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_util_pvc);
      o->deactivate();
    }
    { Fl_Round_Button* o = util_cvl = new Fl_Round_Button(25, 87, 155, 25, "Convolution Analysis");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_util_cvl);
      o->deactivate();
    }
    { Fl_Round_Button* o = util_info = new Fl_Round_Button(25, 115, 150, 25, "Sound File Info");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_util_info);
      util_info->value(1);
    }
    { Fl_Round_Button* o = util_pinfo = new Fl_Round_Button(25, 142, 180, 23, "Phase Vocoder File Info");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_util_pinfo);
      o->deactivate();
    }
    { Fl_Round_Button* o = util_dnoise = new Fl_Round_Button(25, 170, 150, 25, "De Noiser");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_util_dnoise);
      o->deactivate();
    }
    { Fl_Round_Button* o = util_opc = new Fl_Round_Button(25, 197, 150, 20, "List Opcodes");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_util_opc);
    }
    { Fl_Round_Button* o = util_opv = new Fl_Round_Button(25, 220, 150, 25, "Opcode Details");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_util_opv);
    }
    { Fl_Button* o = new Fl_Button(25, 260, 60, 25, "OK");
      o->color((Fl_Color)3);
      o->callback((Fl_Callback*)cb_OK);
    }
    { Fl_Button* o = new Fl_Button(130, 260, 55, 25, "Cancel");
      o->color((Fl_Color)1);
      o->callback((Fl_Callback*)cb_Cancel1);
    }
    o->end();
  }
  return w;
}

Fl_Check_Button *mI=(Fl_Check_Button *)0;

Fl_Check_Button *mn=(Fl_Check_Button *)0;

Fl_Check_Button *mv=(Fl_Check_Button *)0;

Fl_Check_Button *mR=(Fl_Check_Button *)0;

Fl_Value_Input *mH=(Fl_Value_Input *)0;

Fl_Check_Button *mN=(Fl_Check_Button *)0;

Fl_Value_Input *mr=(Fl_Value_Input *)0;

Fl_Value_Input *mk=(Fl_Value_Input *)0;

Fl_Value_Input *mm=(Fl_Value_Input *)0;

Fl_Value_Input *mt=(Fl_Value_Input *)0;

Fl_Value_Input *mB=(Fl_Value_Input *)0;

Fl_Value_Input *mb=(Fl_Value_Input *)0;

Fl_File_Input *mM=(Fl_File_Input *)0;

Fl_File_Input *mi=(Fl_File_Input *)0;

Fl_Check_Button *mSave=(Fl_Check_Button *)0;

Fl_Check_Button *mZ=(Fl_Check_Button *)0;

static void cb_OK1(Fl_Button*, void*) {
  // Transfer!!!
xw->hide();
}

static void cb_Cancel2(Fl_Button*, void*) {
  xw->hide();
}

static void cb_3(Fl_Button*, void*) {
  mM->value(fl_file_chooser("MIDI", "*.mid", NULL));
}

static void cb_4(Fl_Button*, void*) {
  mi->value(fl_file_chooser("Input", "*.{wav,aif}", NULL));
}

Fl_Double_Window* make_extras() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(400, 350, "Additional Arguments");
    w = o;
    { Fl_Check_Button* o = mI = new Fl_Check_Button(15, 25, 25, 25, "I time only (-I)");
      o->down_box(FL_DOWN_BOX);
    }
    { Fl_Check_Button* o = mn = new Fl_Check_Button(15, 58, 25, 25, "No sound to disk (-n)");
      o->down_box(FL_DOWN_BOX);
    }
    { Fl_Check_Button* o = mv = new Fl_Check_Button(15, 91, 25, 25, "Verbose (-v)");
      o->down_box(FL_DOWN_BOX);
    }
    { Fl_Check_Button* o = mR = new Fl_Check_Button(15, 124, 25, 25, "Rewrite Header (-R)");
      o->down_box(FL_DOWN_BOX);
    }
    { Fl_Value_Input* o = mH = new Fl_Value_Input(15, 157, 30, 25, "Heartbeat (-H)");
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Check_Button* o = mN = new Fl_Check_Button(15, 190, 25, 25, "Notify (-N)");
      o->down_box(FL_DOWN_BOX);
    }
    { Fl_Value_Input* o = mr = new Fl_Value_Input(335, 25, 40, 25, "SRate override (-r)");
      mr->value(-1);
    }
    { Fl_Value_Input* o = mk = new Fl_Value_Input(335, 56, 40, 25, "KRate override (-k)");
      mk->value(-1);
    }
    { Fl_Value_Input* o = mm = new Fl_Value_Input(335, 87, 40, 25, "Message level (-m)");
      mm->value(7);
    }
    { Fl_Value_Input* o = mt = new Fl_Value_Input(335, 118, 40, 25, "Beats (-t)");
      mt->value(-1);
    }
    { Fl_Value_Input* o = mB = new Fl_Value_Input(335, 149, 40, 25, "Samples/Hardware (-B)");
      mB->value(1024);
    }
    { Fl_Value_Input* o = mb = new Fl_Value_Input(335, 180, 40, 25, "Samples/Hardware (-b)");
      mb->value(512);
    }
    { Fl_File_Input* o = mM = new Fl_File_Input(20, 240, 160, 25, "MIDI File input (-M)");
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_File_Input* o = mi = new Fl_File_Input(210, 240, 160, 30, "Sound Input (-i)");
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Check_Button* o = mSave = new Fl_Check_Button(20, 275, 25, 25, "Keep Sorted Score");
      o->down_box(FL_DOWN_BOX);
    }
    { Fl_Check_Button* o = mZ = new Fl_Check_Button(215, 280, 25, 25, "Dither Output");
      o->down_box(FL_DOWN_BOX);
    }
    { Fl_Button* o = new Fl_Button(65, 305, 75, 30, "OK");
      o->color((Fl_Color)3);
      o->callback((Fl_Callback*)cb_OK1);
    }
    { Fl_Button* o = new Fl_Button(265, 305, 75, 30, "Cancel");
      o->color((Fl_Color)1);
      o->callback((Fl_Callback*)cb_Cancel2);
    }
    { Fl_Button* o = new Fl_Button(160, 220, 20, 20, "?");
      o->callback((Fl_Callback*)cb_3);
    }
    { Fl_Button* o = new Fl_Button(350, 220, 20, 20, "?");
      o->callback((Fl_Callback*)cb_4);
    }
    o->end();
  }
  return w;
}

Fl_File_Input *op=(Fl_File_Input *)0;

Fl_File_Input *ss=(Fl_File_Input *)0;

Fl_File_Input *sf=(Fl_File_Input *)0;

Fl_File_Input *sa=(Fl_File_Input *)0;

static void cb_OK2(Fl_Button*, void*) {
  // Transfer vales!!
csoundSetGlobalEnv("OPCODEDIR",(char*) op->value());
csoundSetGlobalEnv("SSDIR", (char*) ss->value());
csoundSetGlobalEnv("SFDIR", (char*) sf->value());
csoundSetGlobalEnv("SADIR", (char*) sa->value());
ew->hide();
}

static void cb_Cancel3(Fl_Button*, void*) {
  ew->hide();
}

static void cb_O(Fl_Button*, void*) {
  op->value(fl_dir_chooser("OPCODEDIR", NULL));
}

static void cb_S(Fl_Button*, void*) {
  ss->value(fl_dir_chooser("SSDIR", NULL));
}

static void cb_F(Fl_Button*, void*) {
  sf->value(fl_dir_chooser("SFDIR", NULL));
}

static void cb_A(Fl_Button*, void*) {
  sa->value(fl_dir_chooser("SADIR", NULL));
}

Fl_Double_Window* make_environ() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(325, 230, "Settings");
    w = o;
    { Fl_File_Input* o = op = new Fl_File_Input(95, 15, 185, 25, "OPCODEDIR");
      op->value(getenv("OPCODEDIR"));
    }
    { Fl_File_Input* o = ss = new Fl_File_Input(95, 60, 185, 25, "SSDIR");
      ss->value(getenv("SSDIR"));
    }
    { Fl_File_Input* o = sf = new Fl_File_Input(95, 105, 185, 25, "SFDIR");
      sf->value(getenv("SFDIR"));
    }
    { Fl_File_Input* o = sa = new Fl_File_Input(95, 145, 185, 25, "SADIR");
      sa->value(getenv("SADIR"));
    }
    { Fl_Button* o = new Fl_Button(50, 185, 75, 30, "OK");
      o->color((Fl_Color)3);
      o->callback((Fl_Callback*)cb_OK2);
    }
    { Fl_Button* o = new Fl_Button(205, 185, 75, 30, "Cancel");
      o->color((Fl_Color)1);
      o->callback((Fl_Callback*)cb_Cancel3);
    }
    { Fl_Button* o = new Fl_Button(290, 15, 25, 25, "O");
      o->color((Fl_Color)222);
      o->callback((Fl_Callback*)cb_O);
    }
    { Fl_Button* o = new Fl_Button(290, 60, 25, 25, "S");
      o->color((Fl_Color)222);
      o->callback((Fl_Callback*)cb_S);
    }
    { Fl_Button* o = new Fl_Button(290, 105, 25, 25, "F");
      o->color((Fl_Color)222);
      o->callback((Fl_Callback*)cb_F);
    }
    { Fl_Button* o = new Fl_Button(290, 145, 25, 25, "A");
      o->color((Fl_Color)222);
      o->callback((Fl_Callback*)cb_A);
    }
    o->end();
  }
  return w;
}

Fl_File_Input *sndinfo_file=(Fl_File_Input *)0;

static void cb_OK3(Fl_Return_Button*, void*) {
  do_util = 1;
}

static void cb_Cancel4(Fl_Button*, void*) {
  do_util = -1;
}

static void cb_Browse(Fl_Button*, void*) {
  sndinfo_file->value(fl_file_chooser("SndInfo", "*.{wav,aif,raw,irc}", NULL));
}

Fl_Double_Window* make_info() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(260, 80, "Sndinfo");
    w = o;
    { Fl_File_Input* o = sndinfo_file = new Fl_File_Input(0, 0, 260, 30);
      sndinfo_file->value(output->value());
    }
    { Fl_Return_Button* o = new Fl_Return_Button(10, 40, 55, 25, "OK");
      o->color((Fl_Color)3);
      o->callback((Fl_Callback*)cb_OK3);
    }
    { Fl_Button* o = new Fl_Button(105, 40, 50, 25, "Cancel");
      o->color((Fl_Color)1);
      o->callback((Fl_Callback*)cb_Cancel4);
    }
    { Fl_Button* o = new Fl_Button(205, 40, 50, 25, "Browse");
      o->callback((Fl_Callback*)cb_Browse);
    }
    o->end();
  }
  return w;
}
