# data file for the Fltk User Interface Designer (fluid)
version 1.0107 
do_not_include_H_from_C 
header_name {.hpp} 
code_name {.cpp}
decl {\#include "CsoundGUI.hpp"} {} 

class CsoundGUIMain {open
} {
  decl {CsoundGlobalSettings currentGlobalSettings;} {public
  }
  decl {CsoundPerformanceSettings currentPerformanceSettings;} {public
  }
  decl {CsoundUtilitySettings currentUtilitySettings;} {public
  }
  decl {CsoundGUIConsole consoleWindow;} {}
  decl {CSOUND *csound;} {}
  decl {CsoundPerformance *csPerf;} {}
  decl {int prvTime;} {}
  decl {bool performing;} {}
  decl {bool paused;} {}
  decl {CsoundGlobalSettingsPanel *globalSettingsWindow;} {}
  decl {CsoundPerformanceSettingsPanel *performanceSettingsWindow;} {}
  decl {CsoundUtilitiesWindow *utilitiesWindow;} {}
  decl {CsoundAboutWindow *aboutWindow;} {}
  decl {CsoundUtility *utility_listOpcodes;} {}
  decl {CsoundUtility *utility_cvanal;} {}
  decl {CsoundUtility *utility_pvanal;} {}
  decl {CsoundUtility *utility_hetro;} {}
  decl {CsoundUtility *utility_lpanal;} {}
  decl {CsoundUtility *utility_sndinfo;} {}
  decl {CsoundUtility *utility_srconv;} {}
  decl {CsoundUtility *utility_dnoise;} {}
  decl {int utilityState;} {public
  }
  Function {CsoundGUIMain()} {open
  } {
    code {{
  csound = (CSOUND*) 0;
  csPerf = (CsoundPerformance*) 0;
  prvTime = -1;
  performing = false;
  paused = true;
  globalSettingsWindow = (CsoundGlobalSettingsPanel*) 0;
  performanceSettingsWindow = (CsoundPerformanceSettingsPanel*) 0;
  utilitiesWindow = (CsoundUtilitiesWindow*) 0;
  aboutWindow = (CsoundAboutWindow*) 0;
  utility_listOpcodes = (CsoundUtility*) 0;
  utility_cvanal = (CsoundUtility*) 0;
  utility_pvanal = (CsoundUtility*) 0;
  utility_hetro = (CsoundUtility*) 0;
  utility_lpanal = (CsoundUtility*) 0;
  utility_sndinfo = (CsoundUtility*) 0;
  utility_srconv = (CsoundUtility*) 0;
  utility_dnoise = (CsoundUtility*) 0;
  utilityState = 0;
}} {}
    Fl_Window window {
      label {Csound 5} open
      xywh {411 231 360 285} type Double visible
    } {
      Fl_Group {} {open
        xywh {10 10 340 115} box THIN_UP_FRAME
      } {
        Fl_Input orcNameInput {
          label {Orchestra/CSD}
          callback {stripString(currentPerformanceSettings.orcName, o->value());
updateGUIState_orcName();
writeCsound5GUIConfigFile("p_cfg.dat", currentPerformanceSettings);}
          xywh {55 20 125 25} align 8
          code0 {o->value(currentPerformanceSettings.orcName.c_str());}
        }
        Fl_Button orcNameButton {
          label {...}
          callback {{
  Fl_File_Chooser *fdlg;
  fdlg = new Fl_File_Chooser(currentPerformanceSettings.orcName.c_str(), 0, Fl_File_Chooser::SINGLE, "Select orchestra or CSD file");
  fdlg->show();
  while (fdlg->visible())
    Fl::wait(0.02);
  if (fdlg->value())
    stripString(currentPerformanceSettings.orcName, fdlg->value());
  delete fdlg;
  orcNameInput->value(currentPerformanceSettings.orcName.c_str());
  updateGUIState_orcName();
  writeCsound5GUIConfigFile("p_cfg.dat", currentPerformanceSettings);
}}
          tooltip {Browse orchestra or CSD file} xywh {20 20 25 25}
        }
        Fl_Button editOrcButton {
          label Edit
          callback {editOrcFile();}
          tooltip {Open orchestra or CSD file with external editor} xywh {290 20 50 25}
        }
        Fl_Input scoreNameInput {
          label {Score file}
          callback {stripString(currentPerformanceSettings.scoName, o->value());
updateGUIState_scoName();
writeCsound5GUIConfigFile("p_cfg.dat", currentPerformanceSettings);}
          xywh {55 55 125 25} align 8
          code0 {o->value(currentPerformanceSettings.scoName.c_str());}
        }
        Fl_Button scoreNameButton {
          label {...}
          callback {{
  Fl_File_Chooser *fdlg;
  fdlg = new Fl_File_Chooser(currentPerformanceSettings.scoName.c_str(), 0, Fl_File_Chooser::SINGLE, "Select score file");
  fdlg->show();
  while (fdlg->visible())
    Fl::wait(0.02);
  if (fdlg->value())
    stripString(currentPerformanceSettings.scoName, fdlg->value());
  delete fdlg;
  scoreNameInput->value(currentPerformanceSettings.scoName.c_str());
  updateGUIState_scoName();
  writeCsound5GUIConfigFile("p_cfg.dat", currentPerformanceSettings);
}}
          tooltip {Browse score file} xywh {20 55 25 25}
        }
        Fl_Button editScoreButton {
          label Edit
          callback {editScoreFile();}
          tooltip {Open score file with external editor} xywh {290 55 50 25}
        }
        Fl_Input outfileNameInput {
          label {Output file}
          callback {currentPerformanceSettings.outputFileName = o->value();
updateGUIState_outFile();
writeCsound5GUIConfigFile("p_cfg.dat", currentPerformanceSettings);}
          xywh {55 90 125 25} align 8
          code0 {o->value(currentPerformanceSettings.outputFileName.c_str());}
        }
        Fl_Button outfileNameButton {
          label {...}
          callback {{
  Fl_File_Chooser *fdlg;
  fdlg = new Fl_File_Chooser(currentPerformanceSettings.outputFileName.c_str(), 0, Fl_File_Chooser::CREATE, "Select output sound file");
  fdlg->show();
  while (fdlg->visible())
    Fl::wait(0.02);
  if (fdlg->value())
    stripString(currentPerformanceSettings.outputFileName, fdlg->value());
  delete fdlg;
  outfileNameInput->value(currentPerformanceSettings.outputFileName.c_str());
  updateGUIState_outFile();
  writeCsound5GUIConfigFile("p_cfg.dat", currentPerformanceSettings);
}}
          tooltip {Browse sound output file} xywh {20 90 25 25}
        }
        Fl_Button editOutfileButton {
          label Edit
          callback {editSoundFile(currentPerformanceSettings.outputFileName.c_str());}
          tooltip {Open output sound file with external editor} xywh {290 90 50 25}
        }
      }
      Fl_Group {} {open
        xywh {10 135 225 140} box THIN_UP_FRAME
      } {
        Fl_Output scoreTimeDisplay {selected
          tooltip {The current score time (hh:mm:ss)} xywh {20 145 205 50} color 56 textfont 5 textsize 24 textcolor 129
          code0 {o->value("  --:--:--.-");}
        }
        Fl_Button rewindButton {
          label {@|<}
          callback {if (performing && csPerf != (CsoundPerformance*) 0) {
  csPerf->Rewind();
}}
          tooltip Rewind xywh {20 204 50 25}
        }
        Fl_Button playButton {
          label {@>}
          callback {if (!performing || csPerf == (CsoundPerformance*) 0)
  startPerformance();
else if (paused) {
  paused = false;
  csPerf->Play();
}
else {
  paused = true;
  csPerf->Pause();
}
updateGUIState_controls();}
          tooltip {Play/Pause} xywh {71 204 50 25}
        }
        Fl_Button fastForwardButton {
          label {@>>}
          callback {if (performing && csPerf != (CsoundPerformance*) 0)
  csPerf->AdvanceScoreTime(10.0);}
          tooltip {Fast forward 10 seconds} xywh {123 204 50 25}
        }
        Fl_Button stopButton {
          label {@square}
          callback {if (performing && csPerf != (CsoundPerformance *) 0) {
  performing = false;
  updateGUIState_controls();
}}
          tooltip Stop xywh {175 204 50 25}
        }
        Fl_Value_Input scoreOffsetInput {
          label Seconds
          callback {currentPerformanceSettings.scoreOffsetSeconds = o->value();
if (performing && csPerf != (CsoundPerformance*) 0)
  csPerf->SetScoreOffsetSeconds(currentPerformanceSettings.scoreOffsetSeconds, false);
writeCsound5GUIConfigFile("p_cfg.dat", currentPerformanceSettings);}
          tooltip {Score offset in seconds} xywh {83 240 81 25} align 8 maximum 10000
          code0 {o->value(currentPerformanceSettings.scoreOffsetSeconds);}
        }
        Fl_Button applyScoreOffsetButton {
          label Goto
          callback {if (performing && csPerf != (CsoundPerformance*) 0) {
  if (currentPerformanceSettings.scoreOffsetSeconds >= 0.0)
    csPerf->SetScoreOffsetSeconds(currentPerformanceSettings.scoreOffsetSeconds, true);
}}
          tooltip {Set the current score position to the specified offset} xywh {20 240 50 25}
        }
      }
      Fl_Group {} {open
        xywh {245 135 105 140} box THIN_UP_FRAME
      } {
        Fl_Menu_Button {} {
          label Options
          callback {if (o->value() == 0)
  openGlobalSettingsWindow();
else if (o->value() == 1)
  openPerformanceSettingsWindow();} open
          xywh {255 145 85 25} align 20
          code0 {o->add("General...|Csound...");}
          code1 {o->value(0);}
        } {}
        Fl_Button {} {
          label {Utilities...}
          callback {openUtilitiesWindow();}
          xywh {255 176 85 25} align 20
        }
        Fl_Button {} {
          label Messages
          callback {if (!consoleWindow.window->shown())
  consoleWindow.Clear();
  consoleWindow.window->show();}
          tooltip {Show Csound console messages} xywh {255 207 85 25} align 20
        }
        Fl_Menu_Button {} {
          label Help
          callback {if (o->value() == 0)
  runHelpBrowser();
else if (o->value() == 1)
  openAboutWindow();} open
          xywh {255 238 85 25} align 20
          code0 {o->add("Manual|About");}
          code1 {o->value(0);}
        } {}
      }
    }
  }
  decl {~CsoundGUIMain();} {public
  }
  decl {void setTimeDisplay(double timeVal);} {public
  }
  decl {static int runCmd(std::string&);} {public
  }
  decl {static bool isEmptyString(std::string&);} {public
  }
  decl {static void stripString(std::string&, const char *);} {public
  }
  decl {static bool isCSDFile(std::string&);} {public
  }
  decl {static bool isRtAudioDevice(std::string&, bool);} {public
  }
  decl {void updateGUIState_orcName();} {public
  }
  decl {void updateGUIState_scoName();} {public
  }
  decl {void updateGUIState_outFile();} {public
  }
  decl {void updateGUIState_controls();} {public
  }
  decl {void updateGUIState();} {public
  }
  decl {void updateGUIValues();} {public
  }
  decl {void run();} {public
  }
  decl {void startPerformance();} {public
  }
  decl {void editOrcFile();} {public
  }
  decl {void editScoreFile();} {public
  }
  decl {void editSoundFile(const char *);} {public
  }
  decl {void runHelpBrowser();} {public
  }
  decl {static int yieldCallback(CSOUND *);} {}
  decl {void checkUtilities();} {}
  decl {void openGlobalSettingsWindow();} {public
  }
  decl {void closeGlobalSettingsWindow();} {}
  decl {void openPerformanceSettingsWindow();} {public
  }
  decl {void closePerformanceSettingsWindow();} {}
  decl {void openUtilitiesWindow();} {public
  }
  decl {void closeUtilitiesWindow();} {}
  decl {void openAboutWindow();} {public
  }
  decl {void closeAboutWindow();} {}
  decl {void startListOpcodes();} {public
  }
  decl {void stopListOpcodes();} {public
  }
  decl {void startCvanal();} {public
  }
  decl {void stopCvanal();} {public
  }
  decl {void startPvanal();} {public
  }
  decl {void stopPvanal();} {public
  }
  decl {void startHetro();} {public
  }
  decl {void stopHetro();} {public
  }
  decl {void startLpanal();} {public
  }
  decl {void stopLpanal();} {public
  }
  decl {void startSndinfo();} {public
  }
  decl {void stopSndinfo();} {public
  }
  decl {void startSrconv();} {public
  }
  decl {void stopSrconv();} {public
  }
  decl {void startDnoise();} {public
  }
  decl {void stopDnoise();} {public
  }
} 
