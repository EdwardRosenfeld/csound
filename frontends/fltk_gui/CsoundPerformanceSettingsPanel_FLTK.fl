# data file for the Fltk User Interface Designer (fluid)
version 1.0107 
do_not_include_H_from_C 
header_name {.hpp} 
code_name {.cpp}
decl {\#include "CsoundGUI.hpp"} {} 

class CsoundPerformanceSettingsPanel {open selected
} {
  decl {CsoundPerformanceSettings performanceSettings;} {public
  }
  decl {int status;} {public
  }
  Function {CsoundPerformanceSettingsPanel(CsoundPerformanceSettings& p)} {open
  } {
    code {{
  status = 0;
  window = (Fl_Double_Window*) 0;
  performanceSettings = p;
}} {}
    Fl_Window window {
      label {Csound performance settings}
      callback {status = 1;} open
      xywh {591 206 390 450} type Double
      code0 {window = o;} visible
    } {
      Fl_Tabs {} {open
        xywh {0 0 390 405}
      } {
        Fl_Group {} {
          label General open
          xywh {0 25 390 380}
        } {
          Fl_Input orcNameInput {
            label {Orchestra/CSD}
            callback {{
  CsoundGUIMain::stripString(performanceSettings.orcName, o->value());
  if (CsoundGUIMain::isCSDFile(performanceSettings.orcName)) {
    scoNameInput->deactivate();
    scoNameButton->deactivate();
    scoNameInput->value("");
  }
  else {
    scoNameInput->activate();
    scoNameButton->activate();
    scoNameInput->value(performanceSettings.scoName.c_str());
  }
}}
            xywh {10 35 230 25} align 8
            code0 {o->value(performanceSettings.orcName.c_str());}
          }
          Fl_Button orcNameButton {
            label {...}
            callback {{
  CsoundGUIMain::browseFile(performanceSettings.orcName, "Select orchestra or CSD file", CSOUND5GUI_FILETYPE_ORC_CSD, false);
  orcNameInput->value(performanceSettings.orcName.c_str());
  if (CsoundGUIMain::isCSDFile(performanceSettings.orcName)) {
    scoNameInput->deactivate();
    scoNameButton->deactivate();
    scoNameInput->value("");
  }
  else {
    scoNameInput->activate();
    scoNameButton->activate();
    scoNameInput->value(performanceSettings.scoName.c_str());
  }
}}
            tooltip {Browse orchestra or CSD file} xywh {355 35 25 25}
          }
          Fl_Input scoNameInput {
            label {Score file}
            callback {CsoundGUIMain::stripString(performanceSettings.scoName, o->value());}
            xywh {10 70 230 25} align 8
            code0 {if (CsoundGUIMain::isCSDFile(performanceSettings.orcName)) { o->deactivate(); o->value(""); } else { o->activate(); o->value(performanceSettings.scoName.c_str()); }}
          }
          Fl_Button scoNameButton {
            label {...}
            callback {{
  CsoundGUIMain::browseFile(performanceSettings.scoName, "Select score file", CSOUND5GUI_FILETYPE_SCORE, false);
  scoNameInput->value(performanceSettings.scoName.c_str());
}}
            tooltip {Browse score file} xywh {355 70 25 25}
            code0 {if (CsoundGUIMain::isCSDFile(performanceSettings.orcName)) o->deactivate();}
          }
          Fl_Input lineInputDeviceInput {
            label {Line input}
            callback {CsoundGUIMain::stripString(performanceSettings.lineInput, o->value());}
            tooltip {Line input device (stdin for standard input)} xywh {10 105 230 25} align 8
            code0 {o->value(performanceSettings.lineInput.c_str());}
          }
          Fl_Button lineInputDeviceButton {
            label {...}
            callback {{
  CsoundGUIMain::browseFile(performanceSettings.lineInput, "Select line input device file", CSOUND5GUI_FILETYPE_ALL, false);
  lineInputDeviceInput->value(performanceSettings.lineInput.c_str());
}}
            tooltip {Browse line input device file} xywh {355 105 25 25}
          }
          Fl_Input pluginLibsInput {
            label {Plugin libraries}
            callback {CsoundGUIMain::stripString(performanceSettings.pluginLibs, o->value());}
            tooltip {Comma separated list of additional plugins to load} xywh {10 140 230 25} align 8
            code0 {o->value(performanceSettings.pluginLibs.c_str());}
          }
          Fl_Button pluginLibsButton {
            label {...}
            callback {{
  std::string tmp;
  tmp = "";
  if (CsoundGUIMain::browseFile(tmp, "Select a plugin library", CSOUND5GUI_FILETYPE_ALL, false)) {
    if (CsoundGUIMain::isEmptyString(performanceSettings.pluginLibs))
      performanceSettings.pluginLibs = tmp;
    else {
      CsoundGUIMain::stripString(performanceSettings.pluginLibs, (char*) 0);
      performanceSettings.pluginLibs += ',';
      performanceSettings.pluginLibs += tmp;
    }
  }
  pluginLibsInput->value(performanceSettings.pluginLibs.c_str());
}}
            tooltip {Browse plugin library} xywh {355 140 25 25}
          }
          Fl_Group {} {open
            xywh {10 175 370 220} box ENGRAVED_FRAME
          } {
            Fl_Choice {} {
              label {Display mode}
              callback {performanceSettings.displayMode = o->value() & 3;} open
              xywh {20 185 75 25} down_box BORDER_BOX align 8
              code0 {o->add("None|Full|ASCII|PostScript");}
              code1 {o->value(performanceSettings.displayMode);}
            } {}
            Fl_Value_Input {} {
              label {Message level}
              callback {performanceSettings.messageLevel = (int) (o->value() + 0.5) & 231;}
              xywh {205 185 60 25} align 8 maximum 231 step 1
              code0 {o->value((double) performanceSettings.messageLevel);}
            }
            Fl_Choice {} {
              label Heartbeat
              callback {performanceSettings.heartBeatMode = o->value() & 7;} open
              xywh {20 220 75 25} down_box BORDER_BOX align 8
              code0 {o->add("None|Bar|Dot|Time|Bell");}
              code1 {o->value(performanceSettings.heartBeatMode);}
            } {}
            Fl_Check_Button {} {
              label {Verbose messages}
              callback {performanceSettings.verbose = (o->value() == 0 ? false : true);}
              xywh {205 220 25 25} down_box DOWN_BOX
              code0 {o->value(performanceSettings.verbose ? 1 : 0);}
            }
            Fl_Value_Input sampleRateInput {
              label {Sample rate}
              callback {{
  performanceSettings.sampleRateOverride = o->value();
  if (performanceSettings.sampleRateOverride <= 0.0) {
    performanceSettings.controlRateOverride = -1.0;
    controlRateInput->value(performanceSettings.controlRateOverride);
  }
  else if (performanceSettings.controlRateOverride <= 0.0) {
    performanceSettings.controlRateOverride = performanceSettings.sampleRateOverride;
    controlRateInput->value(performanceSettings.controlRateOverride);
  }
}}
              tooltip {Sample rate override (<= 0: none)} xywh {20 255 75 25} align 8 when 4 minimum -1 maximum 1e+06
              code0 {o->value(performanceSettings.sampleRateOverride);}
            }
            Fl_Value_Input controlRateInput {
              label {Control rate}
              callback {{
  performanceSettings.controlRateOverride = o->value();
  if (performanceSettings.controlRateOverride <= 0.0) {
    performanceSettings.sampleRateOverride = -1.0;
    sampleRateInput->value(performanceSettings.sampleRateOverride);
  }
  else if (performanceSettings.sampleRateOverride <= 0.0) {
    performanceSettings.sampleRateOverride = performanceSettings.controlRateOverride;
    sampleRateInput->value(performanceSettings.sampleRateOverride);
  }
}}
              tooltip {Control rate override (<= 0: none)} xywh {205 255 75 25} align 8 when 4 minimum -1 maximum 1e+06
              code0 {o->value(performanceSettings.controlRateOverride);}
            }
            Fl_Value_Input {} {
              label {Score offset}
              callback {{
  performanceSettings.scoreOffsetSeconds = o->value();
  if (performanceSettings.scoreOffsetSeconds < 0.0)
    performanceSettings.scoreOffsetSeconds = 0.0;
}}
              tooltip {Score offset in seconds} xywh {20 290 75 25} align 8 maximum 10000
              code0 {o->value(performanceSettings.scoreOffsetSeconds);}
            }
            Fl_Value_Input {} {
              label {Initial tempo}
              callback {performanceSettings.beatModeTempo = o->value();}
              tooltip {If greater than zero, enable beat mode with this initial tempo (EXPERIMENTAL)} xywh {205 290 75 25} align 8 minimum -1 maximum 10000
              code0 {o->value(performanceSettings.beatModeTempo);}
            }
            Fl_Value_Input {} {
              label {String length}
              callback {performanceSettings.maxStrLen = (int) (o->value() + 0.5);}
              tooltip {Maximum length of string variables} xywh {20 325 75 25} align 8 minimum 9 maximum 9999 step 1
              code0 {o->value((double) performanceSettings.maxStrLen);}
            }
            Fl_Check_Button {} {
              label {Optimize expressions}
              callback {performanceSettings.enableExpressionOpt = (o->value() == 0 ? false : true);}
              tooltip {Enable experimental optimization of orchestra expressions} xywh {205 325 25 25} down_box DOWN_BOX
              code0 {o->value(performanceSettings.enableExpressionOpt ? 1 : 0);}
            }
            Fl_Check_Button {} {
              label {Skip CsOptions}
              callback {performanceSettings.ignoreCSDOptions = (o->value() == 0 ? false : true);}
              tooltip {Ignore command line flags specified in CSD files} xywh {20 360 25 25} down_box DOWN_BOX
              code0 {o->value(performanceSettings.ignoreCSDOptions ? 1 : 0);}
            }
            Fl_Check_Button {} {
              label {I-time only}
              callback {performanceSettings.iTimeOnly = (o->value() == 0 ? false : true);}
              tooltip {Init time only performace (no audio output)} xywh {155 360 25 25} down_box DOWN_BOX
              code0 {o->value(performanceSettings.iTimeOnly ? 1 : 0);}
            }
            Fl_Check_Button {} {
              label {Defer GEN01}
              callback {performanceSettings.deferGEN1 = (o->value() == 0 ? false : true);}
              tooltip {Defer GEN01 sound file loads} xywh {260 360 25 25} down_box DOWN_BOX
              code0 {o->value(performanceSettings.deferGEN1 ? 1 : 0);}
            }
          }
        }
        Fl_Group {} {
          label {Sound I/O} open
          xywh {0 25 390 380} hide
        } {
          Fl_Input inputFileBox {
            label {Input file}
            callback {CsoundGUIMain::stripString(performanceSettings.inputFileName, o->value());}
            xywh {10 35 260 25} align 8
            code0 {o->value(performanceSettings.inputFileName.c_str());}
          }
          Fl_Button {} {
            label {...}
            callback {{
  CsoundGUIMain::browseFile(performanceSettings.inputFileName, "Select input sound file", CSOUND5GUI_FILETYPE_AUDIO, false);
  inputFileBox->value(performanceSettings.inputFileName.c_str());
}}
            tooltip {Browse input sound file} xywh {355 35 25 25}
          }
          Fl_Input outputFileBox {
            label {Output file}
            callback {CsoundGUIMain::stripString(performanceSettings.outputFileName, o->value());}
            xywh {10 70 260 25} align 8
            code0 {o->value(performanceSettings.outputFileName.c_str());}
          }
          Fl_Button {} {
            label {...}
            callback {{
  CsoundGUIMain::browseFile(performanceSettings.outputFileName, "Select output sound file", CSOUND5GUI_FILETYPE_AUDIO, true);
  outputFileBox->value(performanceSettings.outputFileName.c_str());
}}
            tooltip {Browse output sound file} xywh {355 70 25 25}
          }
          Fl_Choice {} {
            label {File type}
            callback {performanceSettings.soundFileType = performanceSettings.indexToFileType(o->value());} open
            xywh {10 115 80 25} down_box BORDER_BOX align 8
            code0 {for (int i = 0; performanceSettings.indexToFileType(i) != (char*) 0; i++) o->add(performanceSettings.indexToFileType(i));}
            code1 {o->value(performanceSettings.fileTypeToIndex(performanceSettings.soundFileType.c_str()));}
          } {}
          Fl_Choice {} {
            label {Sample format}
            callback {performanceSettings.soundSampleFormat = performanceSettings.indexToSampleFormat(o->value());} open
            xywh {175 115 80 25} down_box BORDER_BOX align 8
            code0 {for (int i = 0; performanceSettings.indexToSampleFormat(i) != (char*) 0; i++) o->add(performanceSettings.indexToSampleFormat(i));}
            code1 {o->value(performanceSettings.sampleFormatToIndex(performanceSettings.soundSampleFormat.c_str()));}
          } {}
          Fl_Check_Button {} {
            label {Peak chunks}
            callback {performanceSettings.enablePeakChunks = (o->value() == 0 ? false : true);}
            xywh {10 150 25 25} down_box DOWN_BOX
            code0 {o->value(performanceSettings.enablePeakChunks ? 1 : 0);}
          }
          Fl_Check_Button {} {
            label {Enable dither}
            callback {performanceSettings.enableDither = (o->value() == 0 ? false : true);}
            xywh {135 150 25 25} down_box DOWN_BOX
            code0 {o->value(performanceSettings.enableDither ? 1 : 0);}
          }
          Fl_Check_Button {} {
            label {Rewrite header}
            callback {performanceSettings.rewriteHeader = (o->value() == 0 ? false : true);}
            xywh {260 150 25 25} down_box DOWN_BOX
            code0 {o->value(performanceSettings.rewriteHeader ? 1 : 0);}
          }
          Fl_Group {} {
            label {Sound file tags} open
            xywh {10 205 370 190} box ENGRAVED_FRAME align 5
          } {
            Fl_Input {} {
              label Artist
              callback {CsoundGUIMain::stripString(performanceSettings.sndidArtist, o->value());}
              xywh {20 215 290 20} labelsize 12 align 8 textsize 12
              code0 {o->value(performanceSettings.sndidArtist.c_str());}
            }
            Fl_Input {} {
              label Comment
              callback {CsoundGUIMain::stripString(performanceSettings.sndidComment, o->value());}
              xywh {20 245 290 20} labelsize 12 align 8 textsize 12
              code0 {o->value(performanceSettings.sndidComment.c_str());}
            }
            Fl_Input {} {
              label Copyright
              callback {CsoundGUIMain::stripString(performanceSettings.sndidCopyright, o->value());}
              xywh {20 275 290 20} labelsize 12 align 8 textsize 12
              code0 {o->value(performanceSettings.sndidCopyright.c_str());}
            }
            Fl_Input {} {
              label Date
              callback {CsoundGUIMain::stripString(performanceSettings.sndidDate, o->value());}
              xywh {20 305 290 20} labelsize 12 align 8 textsize 12
              code0 {o->value(performanceSettings.sndidDate.c_str());}
            }
            Fl_Input {} {
              label Software
              callback {CsoundGUIMain::stripString(performanceSettings.sndidSoftware, o->value());}
              xywh {20 335 290 20} labelsize 12 align 8 textsize 12
              code0 {o->value(performanceSettings.sndidSoftware.c_str());}
            }
            Fl_Input {} {
              label Title
              callback {CsoundGUIMain::stripString(performanceSettings.sndidTitle, o->value());}
              xywh {20 365 290 20} labelsize 12 align 8 textsize 12
              code0 {o->value(performanceSettings.sndidTitle.c_str());}
            }
          }
        }
        Fl_Group {} {
          label {Real time audio} open
          xywh {0 25 390 380} hide
        } {
          Fl_Input_Choice {} {
            label {Real time audio module}
            callback {CsoundGUIMain::stripString(performanceSettings.rtAudioModule, o->value());}
            xywh {10 40 200 25} align 8
            code0 {o->add("PortAudio"); o->add("pa_cb"); o->add("pa_bl"); o->add("MME"); o->add("ALSA"); o->add("JACK"); o->add("CoreAudio"); o->add("null");}
            code1 {o->value(performanceSettings.rtAudioModule.c_str());}
          } {}
          Fl_Choice {} {
            label {Buffer size in sample frames}
            callback {{
  performanceSettings.bufFrames_SW = (1 << ((int) o->value() + 3));
  if (performanceSettings.bufFrames_SW < 16)
    numBuffersInput->deactivate();
  else
    numBuffersInput->activate();
}} open
            xywh {10 80 80 25} down_box BORDER_BOX align 8
            code0 {o->add("default|16|32|64|128|256|512|1024|2048|4096|8192|16384");}
            code1 {o->value((int) (std::log((double) performanceSettings.bufFrames_SW) / std::log(2.0) + 0.5) - 3);}
          } {}
          Fl_Spinner numBuffersInput {
            label {Number of buffers}
            callback {performanceSettings.nBuffers = (int) (o->value() + 0.5);}
            xywh {10 115 80 25} align 8
            code0 {o->range(2.0, 64.0);}
            code1 {o->step(1.0);}
            code2 {o->value((double) performanceSettings.nBuffers);}
            code3 {if (performanceSettings.bufFrames_SW < 16) o->deactivate();}
          }
          Fl_Check_Button {} {
            label {Perform in a separate thread}
            callback {performanceSettings.useThreads = (o->value() == 0 ? false : true);}
            xywh {10 155 25 25} down_box DOWN_BOX
            code0 {o->value(performanceSettings.useThreads ? 1 : 0);}
          }
          Fl_Group {} {
            label {JACK settings (Linux and MacOS X only)} open
            xywh {10 205 370 115} box ENGRAVED_FRAME align 5
          } {
            Fl_Input {} {
              label {Client name}
              callback {CsoundGUIMain::stripString(performanceSettings.jackClientName, o->value());}
              xywh {20 215 190 25} align 8
              code0 {o->value(performanceSettings.jackClientName.c_str());}
            }
            Fl_Input {} {
              label {Input port name prefix}
              callback {CsoundGUIMain::stripString(performanceSettings.jackInPortName, o->value());}
              xywh {20 250 190 25} align 8
              code0 {o->value(performanceSettings.jackInPortName.c_str());}
            }
            Fl_Input {} {
              label {Output port name prefix}
              callback {CsoundGUIMain::stripString(performanceSettings.jackOutPortName, o->value());}
              xywh {20 285 190 25} align 8
              code0 {o->value(performanceSettings.jackOutPortName.c_str());}
            }
          }
        }
        Fl_Group {} {
          label MIDI open
          xywh {0 25 390 380} hide
        } {
          Fl_Group {} {
            label {MIDI file I/O} open
            xywh {10 55 370 150} box ENGRAVED_FRAME align 5
          } {
            Fl_Input midiInFileNameInput {
              label {Input file}
              callback {CsoundGUIMain::stripString(performanceSettings.midiInFileName, o->value());}
              xywh {20 65 225 25} align 8
              code0 {o->value(performanceSettings.midiInFileName.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(performanceSettings.midiInFileName, "Select MIDI input file", CSOUND5GUI_FILETYPE_MIDI, false);
  midiInFileNameInput->value(performanceSettings.midiInFileName.c_str());
}}
              tooltip {Browse MIDI input file} xywh {345 65 25 25}
            }
            Fl_Input {} {
              label {Mute track pattern}
              callback {CsoundGUIMain::stripString(performanceSettings.midiFileMuteTracks, o->value());}
              tooltip {MIDI file tracks to be muted, defined by a pattern of 0 (not muted) and 1 (muted) characters} xywh {20 100 225 25} align 8
              code0 {o->value(performanceSettings.midiFileMuteTracks.c_str());}
            }
            Fl_Check_Button {} {
              label {Terminate performance on end of MIDI input file}
              callback {performanceSettings.terminateOnMidi = (o->value() == 0 ? false : true);}
              xywh {20 135 25 25} down_box DOWN_BOX
              code0 {o->value(performanceSettings.terminateOnMidi ? 1 : 0);}
            }
            Fl_Input midiOutFileNameInput {
              label {Output file}
              callback {CsoundGUIMain::stripString(performanceSettings.midiOutFileName, o->value());}
              xywh {20 170 225 25} align 8
              code0 {o->value(performanceSettings.midiOutFileName.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(performanceSettings.midiOutFileName, "Select MIDI output file", CSOUND5GUI_FILETYPE_MIDI, true);
  midiOutFileNameInput->value(performanceSettings.midiOutFileName.c_str());
}}
              tooltip {Browse MIDI output file} xywh {345 170 25 25}
            }
          }
          Fl_Group {} {
            label {Real time MIDI} open
            xywh {10 230 370 115} box ENGRAVED_FRAME align 5
          } {
            Fl_Input_Choice {} {
              label {Real time MIDI module}
              callback {CsoundGUIMain::stripString(performanceSettings.rtMidiModule, o->value());}
              xywh {20 240 200 25} align 8
              code0 {o->add("PortMidi"); o->add("MME"); o->add("ALSA"); o->add("null");}
              code1 {o->value(performanceSettings.rtMidiModule.c_str());}
            } {}
            Fl_Input {} {
              label {Input device}
              callback {CsoundGUIMain::stripString(performanceSettings.midiInDevName, o->value());}
              xywh {20 275 200 25} align 8
              code0 {o->value(performanceSettings.midiInDevName.c_str());}
            }
            Fl_Input {} {
              label {Output device}
              callback {CsoundGUIMain::stripString(performanceSettings.midiOutDevName, o->value());}
              xywh {20 310 200 25} align 8
              code0 {o->value(performanceSettings.midiOutDevName.c_str());}
            }
          }
          Fl_Check_Button {} {
            label {Raw controller mode}
            callback {performanceSettings.rawControllerMode = (o->value() == 0 ? false : true);}
            xywh {10 362 25 25} down_box DOWN_BOX
            code0 {o->value(performanceSettings.rawControllerMode ? 1 : 0);}
          }
        }
        Fl_Group {} {
          label Environment open
          xywh {0 25 390 380} hide
        } {
          Fl_Group {} {
            label {Environment variables} open
            xywh {10 50 370 150} box ENGRAVED_FRAME align 5
          } {
            Fl_Input sadirBox {
              label SADIR
              callback {CsoundGUIMain::stripString(performanceSettings.sadirPath, o->value());}
              xywh {20 60 260 25} align 8
              code0 {o->value(performanceSettings.sadirPath.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(performanceSettings.sadirPath, "Select directory for analysis files", CSOUND5GUI_FILETYPE_DIRECTORY, false);
  sadirBox->value(performanceSettings.sadirPath.c_str());
}}
              xywh {345 60 25 25}
            }
            Fl_Input ssdirBox {
              label SSDIR
              callback {CsoundGUIMain::stripString(performanceSettings.ssdirPath, o->value());}
              xywh {20 95 260 25} align 8
              code0 {o->value(performanceSettings.ssdirPath.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(performanceSettings.ssdirPath, "Select directory for sound file input", CSOUND5GUI_FILETYPE_DIRECTORY, false);
  ssdirBox->value(performanceSettings.ssdirPath.c_str());
}}
              xywh {345 95 25 25}
            }
            Fl_Input sfdirBox {
              label SFDIR
              callback {CsoundGUIMain::stripString(performanceSettings.sfdirPath, o->value());}
              xywh {20 130 260 25} align 8
              code0 {o->value(performanceSettings.sfdirPath.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(performanceSettings.sfdirPath, "Select directory for sound file output", CSOUND5GUI_FILETYPE_DIRECTORY, false);
  sfdirBox->value(performanceSettings.sfdirPath.c_str());
}}
              xywh {345 130 25 25}
            }
            Fl_Input incdirBox {
              label INCDIR
              callback {CsoundGUIMain::stripString(performanceSettings.incdirPath, o->value());}
              xywh {20 165 260 25} align 8
              code0 {o->value(performanceSettings.incdirPath.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(performanceSettings.incdirPath, "Select directory for include files", CSOUND5GUI_FILETYPE_DIRECTORY, false);
  incdirBox->value(performanceSettings.incdirPath.c_str());
}}
              xywh {345 165 25 25}
            }
          }
          Fl_Scroll {} {
            label strset open
            xywh {10 225 370 170} box DOWN_BOX align 5
            code0 {o->type(Fl_Scroll::VERTICAL_ALWAYS);}
          } {
            Fl_Group {} {open
              xywh {10 225 345 360}
            } {
              Fl_Input {} {
                label 1
                callback {CsoundGUIMain::stripString(performanceSettings.strsets[0], o->value());}
                xywh {35 235 310 25}
                code0 {o->value(performanceSettings.strsets[0].c_str());}
              }
              Fl_Input {} {
                label 2
                callback {CsoundGUIMain::stripString(performanceSettings.strsets[1], o->value());}
                xywh {35 270 310 25}
                code0 {o->value(performanceSettings.strsets[1].c_str());}
              }
              Fl_Input {} {
                label 3
                callback {CsoundGUIMain::stripString(performanceSettings.strsets[2], o->value());}
                xywh {35 305 310 25}
                code0 {o->value(performanceSettings.strsets[2].c_str());}
              }
              Fl_Input {} {
                label 4
                callback {CsoundGUIMain::stripString(performanceSettings.strsets[3], o->value());}
                xywh {35 340 310 25}
                code0 {o->value(performanceSettings.strsets[3].c_str());}
              }
              Fl_Input {} {
                label 5
                callback {CsoundGUIMain::stripString(performanceSettings.strsets[4], o->value());}
                xywh {35 375 310 25}
                code0 {o->value(performanceSettings.strsets[4].c_str());}
              }
              Fl_Input {} {
                label 6
                callback {CsoundGUIMain::stripString(performanceSettings.strsets[5], o->value());}
                xywh {35 410 310 25}
                code0 {o->value(performanceSettings.strsets[5].c_str());}
              }
              Fl_Input {} {
                label 7
                callback {CsoundGUIMain::stripString(performanceSettings.strsets[6], o->value());}
                xywh {35 445 310 25}
                code0 {o->value(performanceSettings.strsets[6].c_str());}
              }
              Fl_Input {} {
                label 8
                callback {CsoundGUIMain::stripString(performanceSettings.strsets[7], o->value());}
                xywh {35 480 310 25}
                code0 {o->value(performanceSettings.strsets[7].c_str());}
              }
              Fl_Input {} {
                label 9
                callback {CsoundGUIMain::stripString(performanceSettings.strsets[8], o->value());}
                xywh {35 515 310 25}
                code0 {o->value(performanceSettings.strsets[8].c_str());}
              }
              Fl_Input {} {
                label 10
                callback {CsoundGUIMain::stripString(performanceSettings.strsets[9], o->value());}
                xywh {35 550 310 25}
                code0 {o->value(performanceSettings.strsets[9].c_str());}
              }
            }
          }
        }
      }
      Fl_Button {} {
        label OK
        callback {status = 1;}
        xywh {250 415 60 25}
      }
      Fl_Button {} {
        label Cancel
        callback {status = -1;}
        xywh {320 415 60 25}
      }
    }
  }
  Function {~CsoundPerformanceSettingsPanel()} {open
  } {
    code {{
  if (window) {
    delete window;
    window = (Fl_Double_Window*) 0;
  }
}} {}
  }
} 
