H O W   T O   B U I L D   C S O U N D   6   F O R   A N D R O I D

Michael Gogins
26 May 2013

Csound 6 for Android includes the Csound library for Android, the CSDPlayer 
app front end for the library, an app containing several demos of the 
library, and some plugins for Csound.

The build is unfortunately configured in several different places, all of 
which must agree. The main configuration is the following environment 
variables, shown with their current values for ARM architecture with 
hardware floating point support, and Android Ice Cream Sandwich or later:

echo "Configure for Android/ARM, armeabi-v7a (ARMv7 VFP), Android 4.0+ (ICS)..."

export SDK=/d/Android/adt-bundle-windows-x86-20130514/sdk
export NDK=/d/Android/android-ndk-r8e
export ANDROID_NDK_ROOT=$NDK
export CSOUND_SRC_ROOT=/c/Users/new/csound-csound6-git
export NDK_MODULE_PATH=${CSOUND_SRC_ROOT}/android/pluginlibs
export PATH=${PATH}:$NDK_MODULE_PATH
export NDKABI=9
export NDKVER=$NDK/toolchains/arm-linux-androideabi-4.7
export NDKP=$NDKVER/prebuilt/windows/bin/arm-linux-androideabi-
export NDKF="--sysroot $NDK/platforms/android-$NDKABI/arch-arm"
export NDKARCH="-march=armv7-a -mfloat-abi=softfp -Wl,--fix-cortex-a8"

To save build time, most native libraries are built as NDK modules so as  
to be available as pre-built components. The complete build 
may be outlined as follows. 

NOTE: These instructions are for MinGW withg MSys from mingw.org on 
Windows 8. The steps would be slightly different on different platforms.

NOTE: It is vital that (currently) all NDK modules built or used by this
project be located in the project's pluginlibs directory. Any new modules
placed here must of course have unique directories that do not conflict with 
existing directories. The build environment must specify the complete path to 
pluginlibs as the NDK_MODULE_PATH environment variable.

B U I L D   A N D   I N S T A L L   L U A J I T   M O D U L E 

Change to $(NDK_MODULE_PATH) and use Git to clone the LuaJIT head there.
Change to the LuaJIT directory and execute:

    make HOST_CC="gcc -m32" CROSS=$NDKP TARGET_FLAGS="$NDKF $NDKARCH" TARGET_SYS=linux

Copy the following files to the prebuilt Android system:

I N S T A L L   S O U R C E   C O D E   F O R   M O D U L E S

Download the pre-assembled archive of source code for required Android 
modules from:

http://sourceforge.net/projects/csound/files/csound5/Android/csound-android-5.19.01.zip/download

Unzip the archive in $(NDK_MODULE_PATH).

B U I L D   A N D   I N S T A L L   F L U I D S Y N T H   M O D U L E

Change to $(CSOUND_SRC_ROOT)/android/pluginlibs/libfluidsynth/jni and execute:

    $NDK/ndk-build
    
B U I L D   A N D   I N S T A L L   L I B S T D U T I L   M O D U L E

This will also build libsndfile for Android.

Change to $(CSOUND_SRC_ROOT)/android/pluginlibs/libstdutil/jni and execute:

    $NDK/ndk-build

B U I L D   A N D   I N S T A L L   L U A   O P C O D E S   P L U G I N

Following the instructions on the LuaJIT web page at http://luajit.org/,
clone the LuaJIT Git repository in the pluginlibs directory. 

Also following instructions on the LuaJIT web page, cross-compile the LuaJIT 
shared library for the ARMv7a target. The build environment should already be 
set up, so just execute the last line of this:

# Android/ARM, armeabi-v7a (ARMv7 VFP), Android 4.0+ (ICS)
NDK=/opt/android/ndk
NDKABI=14
NDKVER=$NDK/toolchains/arm-linux-androideabi-4.6
NDKP=$NDKVER/prebuilt/linux-x86/bin/arm-linux-androideabi-
NDKF="--sysroot $NDK/platforms/android-$NDKABI/arch-arm"
NDKARCH="-march=armv7-a -mfloat-abi=softfp -Wl,--fix-cortex-a8"
make HOST_CC="gcc -m32" CROSS=$NDKP TARGET_FLAGS="$NDKF $NDKARCH"

Change to $(CSOUND_SRC_ROOT)/android/pluginlibs/LuaCsound and execute:

    $NDK/ndk-build
    
NOTE: This currently is not building, I need to replace code that uses
OpenMP, which is not supported on Android.

B U I L D   A N D   I N S T A L L   C S O U N D   6   L I B R A R Y

Change to $(CSOUND_SRC_ROOT)/android/CsoundAndroid and execute:

    ./build.sh
    
This will call SWIG to generate Java bindings to the NDK module for Csound 6,
then build and install the Csound 6 CsoundAndroid module

This script will also call install_libs.sh (which can be run separately) to 
install the above-mentioned local shared libraries in the CsoundAndroid 
libs directory, so that they will be included in the .apk file.

B U I L D   A N D   R U N   C S O U N D   6   O N   A N D R O I D

Configure Eclipse for the Android SDK and for the Android NDK.

Run Eclipse and load the $(CSOUND_SRC_ROOT)/android project directories:

    CSDPlayer
    CsoundAndroid
    CsoundAndroidExamples
    
Make sure that the project.properties files are consistent with the 
environment variables about the Android configuration, e.g. if $NDKABI is 9, 
then (a) the Android target version must be available when you inspect the 
Android SDK Manager configuration tool, and (b) the properties files must 
specify a target equal to or higher than the than $NDKABI, e.g. on my system 
it is target=android-10.

Clean the projects (this should rebuild them). 

Connect your ARMv7 Ice Cream Sandwich device to Eclipse with a USB cable. Run 
the CsoundPlayer project (CSDPlayer app). This wll create the .apk file as well.
